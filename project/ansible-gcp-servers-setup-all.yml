---
# file: ansible-gcp-servers-setup-all.yml
# configures the server instances
# This Playbook has Three Plays: one for critical configurations in all servers
# A second one for installing software in web servers
# a third one to install software in the Load Balancer server

# This First Play Sets up critical configuration on servers
- hosts: targets
  # as the systems are not yet "known" by Ansible Facts cannot be gathered yet
  gather_facts: no
  remote_user: ubuntu
  become: yes
  become_method: sudo

  pre_tasks:
    # To operate remotely in critical files without direct user input
    - name: Remove require tty - alt
      lineinfile:
        regexp: "requiretty"
        dest: /etc/sudoers.d/os_defaults
        state: absent
    # Giving permissions in sudoers for system critical files (see https://docs.ansible.com/ansible/latest/modules/lineinfile_module.html)
    - name: Validate the sudoers file before saving  not to require password
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%ADMIN ALL='
        line: '%ADMIN ALL=(ALL) NOPASSWD: ALL'
        validate: /usr/sbin/visudo -cf %s
    # Install the SSH key on servers
    - name: install ssh key
      authorized_key:
        user: ubuntu
        key: "{{ lookup('file', '/home/vagrant/.ssh/id_rsa.pub') }}"
        state: present
    # Update repo
    - name: Update apt repo and cache
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

- hosts: web_targets
  gather_facts: True
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    # Install nodejs and npm on servers
    - name: install nodejs and npm
      apt:
        pkg:
          - nodejs
          - npm
        state: latest

- hosts: web
  gather_facts: True
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    - name: update /etc/hosts file for name resolution
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item]['ansible_host'] }} {{item}}"
        state: present
      when: hostvars[item]['ansible_host'] is defined
      with_items: '{{groups.redis}}'

# This play installs the required software in web servers
# tasks names are self explanatory

- hosts: web_add
  gather_facts: True
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    - name: Add NGINX Repository
      apt_repository:
        repo: ppa:nginx/stable
        state: present

    - name: install nginx
      apt:
        pkg: nginx
        state: present

    - name: copy directory
      copy:
        src: /home/vagrant/project/add_service
        dest: /

    - name: install npm dependencies
      command: chdir=/add_service npm i

    - name: cache clean
      command: chdir=/add_service npm cache clean -f

    - name: update npm version
      command: chdir=/add_service npm install -g n

    - name: n stable
      command: chdir=/add_service n stable

    - name: install forever
      npm: name=forever global=yes state=present

    - name: check running node.js apps
      command: forever list
      register: forever_list
      changed_when: false

    - name: start server
      command: chdir=/add_service forever start server.js
      when: "forever_list.stdout.find('/add_service/server.js') == -1"

  # The handler is common to the nginx installation steps
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

- hosts: web_sub
  gather_facts: True
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    - name: Add NGINX Repository
      apt_repository:
        repo: ppa:nginx/stable
        state: present

    - name: install nginx
      apt:
        pkg: nginx
        state: present

    - name: copy directory
      copy:
        src: /home/vagrant/project/sub_service
        dest: /

    - name: install npm dependencies
      command: chdir=/sub_service npm i

    - name: cache clean
      command: chdir=/sub_service npm cache clean -f

    - name: update npm version
      command: chdir=/sub_service npm install -g n

    - name: n stable
      command: chdir=/sub_service n stable

    - name: install forever
      npm: name=forever global=yes state=present

    - name: check running node.js apps
      command: forever list
      register: forever_list
      changed_when: false

    - name: start server
      command: chdir=/sub_service forever start server.js
      when: "forever_list.stdout.find('/sub_service/server.js') == -1"

  # The handler is common to the nginx installation steps
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

- hosts: web_mult
  gather_facts: True
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    - name: Add NGINX Repository
      apt_repository:
        repo: ppa:nginx/stable
        state: present

    - name: install nginx
      apt:
        pkg: nginx
        state: present

    - name: copy directory
      copy:
        src: /home/vagrant/project/mult_service
        dest: /

    - name: install npm dependencies
      command: chdir=/mult_service npm i

    - name: cache clean
      command: chdir=/mult_service npm cache clean -f

    - name: update npm version
      command: chdir=/mult_service npm install -g n

    - name: n stable
      command: chdir=/mult_service n stable

    - name: install forever
      npm: name=forever global=yes state=present

    - name: check running node.js apps
      command: forever list
      register: forever_list
      changed_when: false

    - name: start server
      command: chdir=/mult_service forever start server.js
      when: "forever_list.stdout.find('/mult_service/server.js') == -1"

  # The handler is common to the nginx installation steps
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

- hosts: web_div
  gather_facts: True
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:

    - name: Add NGINX Repository
      apt_repository:
        repo: ppa:nginx/stable
        state: present

    - name: install nginx
      apt:
        pkg: nginx
        state: present

    - name: copy directory
      copy:
        src: /home/vagrant/project/div_service
        dest: /

    - name: install npm dependencies
      command: chdir=/div_service npm i

    - name: cache clean
      command: chdir=/div_service npm cache clean -f

    - name: update npm version
      command: chdir=/div_service npm install -g n

    - name: n stable
      command: chdir=/div_service n stable

    - name: install forever
      npm: name=forever global=yes state=present

    - name: check running node.js apps
      command: forever list
      register: forever_list
      changed_when: false

    - name: start server
      command: chdir=/div_service forever start server.js
      when: "forever_list.stdout.find('/div_service/server.js') == -1"

  # The handler is common to the nginx installation steps
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

# populate prometheus /etc/hosts file
- hosts: prometheus
  gather_facts: true
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    # As there is no internal DNS service, we need to populate /etc/hosts
    - name: update /etc/hosts file for name resolution of self
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "127.0.0.1 {{item}}"
        state: present
      with_items: prometheus
    - name: update /etc/hosts file for name resolution
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{item}}"
        state: present
      when: hostvars[item]['ansible_default_ipv4']['address'] is defined
      with_items: '{{groups.web_targets}}'

    - name: Add NGINX Repository
      apt_repository:
        repo: ppa:nginx/stable
        state: present
    - name: install nginx
      apt:
        pkg: nginx
        state: present

  # The handler is common to the nginx installation steps
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

# populate grafana /etc/hosts file
- hosts: grafana
  gather_facts: true
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    # As there is no internal DNS service, we need to populate /etc/hosts
    - name: update /etc/hosts file for name resolution of self
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "127.0.0.1 {{item}}"
        state: present
      with_items: grafana
    - name: update /etc/hosts file for name resolution
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{item}}"
        state: present
      when: hostvars[item]['ansible_default_ipv4']['address'] is defined
      with_items: '{{groups.web_targets}}'
    - name: update /etc/hosts file for name resolution
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{item}}"
        state: present
      when: hostvars[item]['ansible_default_ipv4']['address'] is defined
      with_items: prometheus

    - name: Add NGINX Repository
      apt_repository:
        repo: ppa:nginx/stable
        state: present
    - name: install nginx
      apt:
        pkg: nginx
        state: present

  # The handler is common to the nginx installation steps
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

# This Third Play install the required software in the Load Balancer
- hosts: loadbal
  gather_facts: true
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    # As there is no internal DNS service, we need to populate /etc/hosts
    - name: update /etc/hosts file for name resolution of self
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "127.0.0.1 {{item}}"
        state: present
      with_items: balancer
    # As there is no internal DNS service, we need to populate /etc/hosts
    - name: update /etc/hosts file for name resolution
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{item}}"
        state: present
      when: hostvars[item]['ansible_default_ipv4']['address'] is defined
      with_items: '{{groups.web}}'    
      
    - name: add HAPROXY Repository
      apt_repository:
        repo: ppa:vbernat/haproxy-2.1
        update_cache: true

    - name: install haproxy and socat
      apt:
        pkg: ['haproxy', 'socat']
        state: latest

    - name: enable haproxy
      lineinfile:
        path: /etc/default/haproxy
        regexp: "^ENABLED.+$"
        line: "ENABLED=1"
        state: present

    - name: deploy haproxy config
      template:
        src: /home/vagrant/project/local_webapp/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        mode: 0644
        validate: haproxy -f %s -c -q
      notify: restart haproxy

    - name: Ensure HAProxy is started and enabled on boot.
      service:
        name: haproxy
        state: started
        enabled: yes

    - name: copy directory
      copy:
        src: /home/vagrant/project/local_webapp
        dest: /

    - name: install npm dependencies
      command: chdir=/local_webapp npm i

    - name: install forever
      npm: name=forever global=yes state=present

    - name: check running node.js apps
      command: forever list
      register: forever_list
      changed_when: false

    - name: start server
      command: chdir=/local_webapp forever start server.js
      when: "forever_list.stdout.find('/local_webapp/server.js') == -1"

  # The handler is common to the haproxy installation steps
  handlers:
    - name: restart haproxy
      service:
        name: haproxy
        state: restarted
